schema {
  query: Query
  mutation: Mutation
}

type ActionItem implements Node {
  id: ID!
  ActionItemId: Int!
  ActionItemName: String!
  ActionItemDescription: String!
  ActionItemStartDate: Float!
  ActionItemEndDate: Float!
  ActionItemType: Int!
  Issue(after: String, first: Int, before: String, last: Int): Issue
  Officials(after: String, first: Int, before: String, last: Int): OfficialConnection
}

type ActionItemConnection {
  pageInfo: PageInfo!
  edges: [ActionItemEdge]
}

type ActionItemEdge {
  node: ActionItem
  cursor: String!
}

type AppUser implements Node {
  id: ID!
  AppUserId: Int!
  FirstName: String!
  LastName: String!
  Email: String!
  Address1: String!
  Address2: String!
  Zipcode: String!
  City: String!
  State: String!
  Gender: Int
  Points: String!
  ActionItems(after: String, first: Int, before: String, last: Int): ActionItemConnection
  Channels(after: String, first: Int, before: String, last: Int): ChannelConnection
}

type Channel implements Node {
  id: ID!
  ChannelId: Int!
  ChannelName: String!
  ChannelDescription: String!
  Issues(after: String, first: Int, before: String, last: Int): IssueConnection
}

type ChannelConnection {
  pageInfo: PageInfo!
  edges: [ChannelEdge]
}

type ChannelEdge {
  node: Channel
  cursor: String!
}

input HandleActionItemByUserInput {
  actionItem_ID: Int!
  appUser_ID: Int!
  handleActionType: Int!
  clientMutationId: String
}

type HandleActionItemByUserPayload {
  appUser: AppUser
  clientMutationId: String
}

type Issue implements Node {
  id: ID!
  IssueId: Int!
  Name: String!
  IssueDescription: String!
  ActionItems(after: String, first: Int, before: String, last: Int): ActionItemConnection
  Resources(after: String, first: Int, before: String, last: Int): ResourceConnection
}

type IssueConnection {
  pageInfo: PageInfo!
  edges: [IssueEdge]
}

type IssueEdge {
  node: Issue
  cursor: String!
}

type Lookup implements Node {
  id: ID!
  LookupId: Int!
  LookupName: String!
  DisplayName: String!
  LookupDescription: String
  LookupItems(after: String, first: Int, before: String, last: Int): LookupItemConnection
}

type LookupConnection {
  pageInfo: PageInfo!
  edges: [LookupEdge]
}

type LookupEdge {
  node: Lookup
  cursor: String!
}

type LookupItem implements Node {
  id: ID!
  LookupItemId: Int!
  LookupItemDefinition: String!
  LookupItemName: String!
  DisplayName: String!
  LookupDescription: String
  Lookup(after: String, first: Int, before: String, last: Int): LookupConnection
}

type LookupItemConnection {
  pageInfo: PageInfo!
  edges: [LookupItemEdge]
}

type LookupItemEdge {
  node: LookupItem
  cursor: String!
}

type Mutation {
  submitIssue(input: SubmitIssueInput!): SubmitIssuePayload
  submitActionItem(input: SubmitActionItemInput!): SubmitActionItemPayload
  submitLookup(input: SubmitLookupInput!): SubmitLookupPayload
  submitLookupItem(input: SubmitLookupItemInput!): SubmitLookupItemPayload
  submitOfficial(input: SubmitOfficialInput!): SubmitOfficialPayload
  submitResource(input: SubmitResourceInput!): SubmitResourcePayload
  submitPoliticalEvent(input: SubmitPoliticalEventInput!): SubmitPoliticalEventPayload
  submitAppUser(input: SubmitAppUserInput!): SubmitAppUserPayload
  handleActionItemByUser(input: HandleActionItemByUserInput!): HandleActionItemByUserPayload
}

interface Node {
  id: ID!
}

type Official implements Node {
  id: ID!
  OfficialId: Int!
  FirstName: String!
  LastName: String!
  GovernmentLevelId: Int!
  GeographyId: String!
  Gender: String
  Party: String
  Phone: String
  Email: String
  Url: String
  ContactForm: String
  Twitter: String
  Facebook: String
  PoliticalEvents(after: String, first: Int, before: String, last: Int): PoliticalEventConnection
  Resources(after: String, first: Int, before: String, last: Int): ResourceConnection
  ActionItems(after: String, first: Int, before: String, last: Int): ActionItemConnection
}

type OfficialConnection {
  pageInfo: PageInfo!
  edges: [OfficialEdge]
}

type OfficialEdge {
  node: Official
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PoliticalEvent implements Node {
  id: ID!
  PoliticalEventId: Int!
  PoliticalEventName: String!
  PoliticalEventDescription: String!
  PoliticalEventDate: Float!
  PoliticalEventTime: String!
  PoliticalEventType: Int!
  Issue(after: String, first: Int, before: String, last: Int): Issue
  Resources(after: String, first: Int, before: String, last: Int): ResourceConnection
}

type PoliticalEventConnection {
  pageInfo: PageInfo!
  edges: [PoliticalEventEdge]
}

type PoliticalEventEdge {
  node: PoliticalEvent
  cursor: String!
}

type Query {
  viewer: AppUser
  channel(id: Int): Channel
  official(id: Int): Official
  officials(limit: Int, offset: Int): [Official]
  issue(id: Int): Issue
  issues(limit: Int, offset: Int): [Issue]
  actionItem(id: Int): ActionItem
  actionItems(limit: Int, offset: Int): [ActionItem]
  resource(id: Int): Resource
  resources(limit: Int, offset: Int): [Resource]
  politicalEvent(id: Int): PoliticalEvent
  politicalEvents(limit: Int, offset: Int): [PoliticalEvent]
  lookup(id: Int): Lookup
  lookups: [Lookup]
  lookupItem(lookupItem_ID: Int): LookupItem
  lookupItems(lookup_ID: Int): [LookupItem]
  appUser(appUser_ID: Int): AppUser
  appUsers(limit: Int, offset: Int): [AppUser]
  node(id: ID!): Node
}

type Resource implements Node {
  id: ID!
  ResourceId: Int!
  ResourceName: String!
  ResourceDescription: String!
  Url: String
  Media: String
}

type ResourceConnection {
  pageInfo: PageInfo!
  edges: [ResourceEdge]
}

type ResourceEdge {
  node: Resource
  cursor: String!
}

input SubmitActionItemInput {
  issue_ID: Int!
  actionItemName: String!
  actionItemDescription: String!
  actionItemStartDate: Float!
  actionItemEndDate: Float!
  actionItemType: Int!
  clientMutationId: String
}

type SubmitActionItemPayload {
  actionItem: ActionItem
  clientMutationId: String
}

input SubmitAppUserInput {
  firstName: String!
  lastName: String!
  email: String!
  address1: String!
  address2: String!
  zipcode: String!
  city: String!
  state: String!
  gender: String
  points: Int!
  clientMutationId: String
}

type SubmitAppUserPayload {
  appUser: AppUser
  clientMutationId: String
}

input SubmitIssueInput {
  issueName: String!
  issueDescription: String!
  clientMutationId: String
}

type SubmitIssuePayload {
  issue: Issue
  clientMutationId: String
}

input SubmitLookupInput {
  lookupName: String!
  displayName: String!
  lookupDescription: String!
  clientMutationId: String
}

input SubmitLookupItemInput {
  lookup_ID: Int!
  lookupItemDefinition: String!
  lookupItemName: String!
  displayName: String!
  lookupItemDescription: String!
  clientMutationId: String
}

type SubmitLookupItemPayload {
  lookupItem: LookupItem
  clientMutationId: String
}

type SubmitLookupPayload {
  lookup: Lookup
  clientMutationId: String
}

input SubmitOfficialInput {
  firstName: String!
  lastName: String!
  governmentLevelId: Int!
  geographyId: Int!
  gender: String
  phone: String
  url: String
  contactForm: String
  twitter: String
  facebook: String
  clientMutationId: String
}

type SubmitOfficialPayload {
  official: Official
  clientMutationId: String
}

input SubmitPoliticalEventInput {
  politicalEventName: String!
  politicalEventDescription: String!
  politicalEventDate: Float!
  politicalEventTime: String!
  politicalEventType: String!
  clientMutationId: String
}

type SubmitPoliticalEventPayload {
  politicalEvent: PoliticalEvent
  clientMutationId: String
}

input SubmitResourceInput {
  resourceName: String!
  resourceDescription: String!
  url: String
  media: String
  resourceRelationType: Int
  resourceRelationId: Int
  clientMutationId: String
}

type SubmitResourcePayload {
  resource: Resource
  clientMutationId: String
}
